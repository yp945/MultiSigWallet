/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MultiSigWalletWithDailyLimitInterface extends utils.Interface {
  functions: {
    "owners(uint256)": FunctionFragment;
    "removeOwner(address)": FunctionFragment;
    "revokeConfirmation(uint256)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "confirmations(uint256,address)": FunctionFragment;
    "calcMaxWithdraw()": FunctionFragment;
    "getTransactionCount(bool,bool)": FunctionFragment;
    "dailyLimit()": FunctionFragment;
    "lastDay()": FunctionFragment;
    "addOwner(address)": FunctionFragment;
    "isConfirmed(uint256)": FunctionFragment;
    "getConfirmationCount(uint256)": FunctionFragment;
    "transactions(uint256)": FunctionFragment;
    "getOwners()": FunctionFragment;
    "getTransactionIds(uint256,uint256,bool,bool)": FunctionFragment;
    "getConfirmations(uint256)": FunctionFragment;
    "transactionCount()": FunctionFragment;
    "changeRequirement(uint256)": FunctionFragment;
    "confirmTransaction(uint256)": FunctionFragment;
    "submitTransaction(address,uint256,bytes)": FunctionFragment;
    "changeDailyLimit(uint256)": FunctionFragment;
    "MAX_OWNER_COUNT()": FunctionFragment;
    "required()": FunctionFragment;
    "replaceOwner(address,address)": FunctionFragment;
    "executeTransaction(uint256)": FunctionFragment;
    "spentToday()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "owners"
      | "removeOwner"
      | "revokeConfirmation"
      | "isOwner"
      | "confirmations"
      | "calcMaxWithdraw"
      | "getTransactionCount"
      | "dailyLimit"
      | "lastDay"
      | "addOwner"
      | "isConfirmed"
      | "getConfirmationCount"
      | "transactions"
      | "getOwners"
      | "getTransactionIds"
      | "getConfirmations"
      | "transactionCount"
      | "changeRequirement"
      | "confirmTransaction"
      | "submitTransaction"
      | "changeDailyLimit"
      | "MAX_OWNER_COUNT"
      | "required"
      | "replaceOwner"
      | "executeTransaction"
      | "spentToday"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "owners",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeConfirmation",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmations",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calcMaxWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionCount",
    values: [PromiseOrValue<boolean>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lastDay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isConfirmed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfirmationCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTransactionIds",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfirmations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeRequirement",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDailyLimit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_OWNER_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "required", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "replaceOwner",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "spentToday",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcMaxWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dailyLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastDay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRequirement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDailyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_OWNER_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "required", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "replaceOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "spentToday", data: BytesLike): Result;

  events: {
    "DailyLimitChange(uint256)": EventFragment;
    "Confirmation(address,uint256)": EventFragment;
    "Revocation(address,uint256)": EventFragment;
    "Submission(uint256)": EventFragment;
    "Execution(uint256)": EventFragment;
    "ExecutionFailure(uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "OwnerAddition(address)": EventFragment;
    "OwnerRemoval(address)": EventFragment;
    "RequirementChange(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DailyLimitChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Confirmation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revocation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Submission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Execution"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerRemoval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequirementChange"): EventFragment;
}

export interface DailyLimitChangeEventObject {
  dailyLimit: BigNumber;
}
export type DailyLimitChangeEvent = TypedEvent<
  [BigNumber],
  DailyLimitChangeEventObject
>;

export type DailyLimitChangeEventFilter =
  TypedEventFilter<DailyLimitChangeEvent>;

export interface ConfirmationEventObject {
  sender: string;
  transactionId: BigNumber;
}
export type ConfirmationEvent = TypedEvent<
  [string, BigNumber],
  ConfirmationEventObject
>;

export type ConfirmationEventFilter = TypedEventFilter<ConfirmationEvent>;

export interface RevocationEventObject {
  sender: string;
  transactionId: BigNumber;
}
export type RevocationEvent = TypedEvent<
  [string, BigNumber],
  RevocationEventObject
>;

export type RevocationEventFilter = TypedEventFilter<RevocationEvent>;

export interface SubmissionEventObject {
  transactionId: BigNumber;
}
export type SubmissionEvent = TypedEvent<[BigNumber], SubmissionEventObject>;

export type SubmissionEventFilter = TypedEventFilter<SubmissionEvent>;

export interface ExecutionEventObject {
  transactionId: BigNumber;
}
export type ExecutionEvent = TypedEvent<[BigNumber], ExecutionEventObject>;

export type ExecutionEventFilter = TypedEventFilter<ExecutionEvent>;

export interface ExecutionFailureEventObject {
  transactionId: BigNumber;
}
export type ExecutionFailureEvent = TypedEvent<
  [BigNumber],
  ExecutionFailureEventObject
>;

export type ExecutionFailureEventFilter =
  TypedEventFilter<ExecutionFailureEvent>;

export interface DepositEventObject {
  sender: string;
  value: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnerAdditionEventObject {
  owner: string;
}
export type OwnerAdditionEvent = TypedEvent<[string], OwnerAdditionEventObject>;

export type OwnerAdditionEventFilter = TypedEventFilter<OwnerAdditionEvent>;

export interface OwnerRemovalEventObject {
  owner: string;
}
export type OwnerRemovalEvent = TypedEvent<[string], OwnerRemovalEventObject>;

export type OwnerRemovalEventFilter = TypedEventFilter<OwnerRemovalEvent>;

export interface RequirementChangeEventObject {
  required: BigNumber;
}
export type RequirementChangeEvent = TypedEvent<
  [BigNumber],
  RequirementChangeEventObject
>;

export type RequirementChangeEventFilter =
  TypedEventFilter<RequirementChangeEvent>;

export interface MultiSigWalletWithDailyLimit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MultiSigWalletWithDailyLimitInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeConfirmation(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    confirmations(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    calcMaxWithdraw(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTransactionCount(
      pending: PromiseOrValue<boolean>,
      executed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    dailyLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastDay(overrides?: CallOverrides): Promise<[BigNumber]>;

    addOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isConfirmed(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getConfirmationCount(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean] & {
        destination: string;
        value: BigNumber;
        data: string;
        executed: boolean;
      }
    >;

    getOwners(overrides?: CallOverrides): Promise<[string[]]>;

    getTransactionIds(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      pending: PromiseOrValue<boolean>,
      executed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _transactionIds: BigNumber[] }>;

    getConfirmations(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { _confirmations: string[] }>;

    transactionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeRequirement(
      _required: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitTransaction(
      destination: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    required(overrides?: CallOverrides): Promise<[BigNumber]>;

    replaceOwner(
      owner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    spentToday(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  owners(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  removeOwner(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeConfirmation(
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isOwner(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  confirmations(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  calcMaxWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

  getTransactionCount(
    pending: PromiseOrValue<boolean>,
    executed: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dailyLimit(overrides?: CallOverrides): Promise<BigNumber>;

  lastDay(overrides?: CallOverrides): Promise<BigNumber>;

  addOwner(
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isConfirmed(
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getConfirmationCount(
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transactions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, boolean] & {
      destination: string;
      value: BigNumber;
      data: string;
      executed: boolean;
    }
  >;

  getOwners(overrides?: CallOverrides): Promise<string[]>;

  getTransactionIds(
    from: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<BigNumberish>,
    pending: PromiseOrValue<boolean>,
    executed: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getConfirmations(
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

  changeRequirement(
    _required: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmTransaction(
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitTransaction(
    destination: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeDailyLimit(
    _dailyLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

  required(overrides?: CallOverrides): Promise<BigNumber>;

  replaceOwner(
    owner: PromiseOrValue<string>,
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeTransaction(
    transactionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  spentToday(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeConfirmation(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    confirmations(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    calcMaxWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionCount(
      pending: PromiseOrValue<boolean>,
      executed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyLimit(overrides?: CallOverrides): Promise<BigNumber>;

    lastDay(overrides?: CallOverrides): Promise<BigNumber>;

    addOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isConfirmed(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getConfirmationCount(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, boolean] & {
        destination: string;
        value: BigNumber;
        data: string;
        executed: boolean;
      }
    >;

    getOwners(overrides?: CallOverrides): Promise<string[]>;

    getTransactionIds(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      pending: PromiseOrValue<boolean>,
      executed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getConfirmations(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    changeRequirement(
      _required: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTransaction(
      destination: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    required(overrides?: CallOverrides): Promise<BigNumber>;

    replaceOwner(
      owner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    spentToday(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "DailyLimitChange(uint256)"(dailyLimit?: null): DailyLimitChangeEventFilter;
    DailyLimitChange(dailyLimit?: null): DailyLimitChangeEventFilter;

    "Confirmation(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): ConfirmationEventFilter;
    Confirmation(
      sender?: PromiseOrValue<string> | null,
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): ConfirmationEventFilter;

    "Revocation(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): RevocationEventFilter;
    Revocation(
      sender?: PromiseOrValue<string> | null,
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): RevocationEventFilter;

    "Submission(uint256)"(
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): SubmissionEventFilter;
    Submission(
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): SubmissionEventFilter;

    "Execution(uint256)"(
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): ExecutionEventFilter;
    Execution(
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): ExecutionEventFilter;

    "ExecutionFailure(uint256)"(
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): ExecutionFailureEventFilter;
    ExecutionFailure(
      transactionId?: PromiseOrValue<BigNumberish> | null
    ): ExecutionFailureEventFilter;

    "Deposit(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      value?: null
    ): DepositEventFilter;
    Deposit(
      sender?: PromiseOrValue<string> | null,
      value?: null
    ): DepositEventFilter;

    "OwnerAddition(address)"(
      owner?: PromiseOrValue<string> | null
    ): OwnerAdditionEventFilter;
    OwnerAddition(
      owner?: PromiseOrValue<string> | null
    ): OwnerAdditionEventFilter;

    "OwnerRemoval(address)"(
      owner?: PromiseOrValue<string> | null
    ): OwnerRemovalEventFilter;
    OwnerRemoval(
      owner?: PromiseOrValue<string> | null
    ): OwnerRemovalEventFilter;

    "RequirementChange(uint256)"(required?: null): RequirementChangeEventFilter;
    RequirementChange(required?: null): RequirementChangeEventFilter;
  };

  estimateGas: {
    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeConfirmation(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confirmations(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcMaxWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionCount(
      pending: PromiseOrValue<boolean>,
      executed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dailyLimit(overrides?: CallOverrides): Promise<BigNumber>;

    lastDay(overrides?: CallOverrides): Promise<BigNumber>;

    addOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isConfirmed(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfirmationCount(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwners(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionIds(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      pending: PromiseOrValue<boolean>,
      executed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getConfirmations(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactionCount(overrides?: CallOverrides): Promise<BigNumber>;

    changeRequirement(
      _required: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitTransaction(
      destination: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    required(overrides?: CallOverrides): Promise<BigNumber>;

    replaceOwner(
      owner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    spentToday(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    owners(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeConfirmation(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isOwner(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    confirmations(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcMaxWithdraw(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTransactionCount(
      pending: PromiseOrValue<boolean>,
      executed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dailyLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastDay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addOwner(
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isConfirmed(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfirmationCount(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTransactionIds(
      from: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<BigNumberish>,
      pending: PromiseOrValue<boolean>,
      executed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getConfirmations(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeRequirement(
      _required: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitTransaction(
      destination: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeDailyLimit(
      _dailyLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    MAX_OWNER_COUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    required(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    replaceOwner(
      owner: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeTransaction(
      transactionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    spentToday(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
